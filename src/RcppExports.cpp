// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "harmony_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kmeans_centers
arma::mat kmeans_centers(const arma::mat& X, const int K);
RcppExport SEXP _harmony_kmeans_centers(SEXP XSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_centers(X, K));
    return rcpp_result_gen;
END_RCPP
}
// scaleRows_dgc
MATTYPE scaleRows_dgc(const VECTYPE& x, const VECTYPE& p, const VECTYPE& i, int ncol, int nrow, float thresh);
RcppExport SEXP _harmony_scaleRows_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VECTYPE& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const VECTYPE& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const VECTYPE& >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< float >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleRows_dgc(x, p, i, ncol, nrow, thresh));
    return rcpp_result_gen;
END_RCPP
}
// find_lambda_cpp
arma::vec find_lambda_cpp(const float alpha, const arma::vec& cluster_E);
RcppExport SEXP _harmony_find_lambda_cpp(SEXP alphaSEXP, SEXP cluster_ESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type cluster_E(cluster_ESEXP);
    rcpp_result_gen = Rcpp::wrap(find_lambda_cpp(alpha, cluster_E));
    return rcpp_result_gen;
END_RCPP
}
// make_R_hard
arma::mat make_R_hard(const arma::mat& R);
RcppExport SEXP _harmony_make_R_hard(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(make_R_hard(R));
    return rcpp_result_gen;
END_RCPP
}
// sampleIdxAndWeight
arma::mat sampleIdxAndWeight(const arma::mat& R_hard, const arma::sp_mat& Phi, const float sample_num);
RcppExport SEXP _harmony_sampleIdxAndWeight(SEXP R_hardSEXP, SEXP PhiSEXP, SEXP sample_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R_hard(R_hardSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< const float >::type sample_num(sample_numSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleIdxAndWeight(R_hard, Phi, sample_num));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_harmony_module();

static const R_CallMethodDef CallEntries[] = {
    {"_harmony_kmeans_centers", (DL_FUNC) &_harmony_kmeans_centers, 2},
    {"_harmony_scaleRows_dgc", (DL_FUNC) &_harmony_scaleRows_dgc, 6},
    {"_harmony_find_lambda_cpp", (DL_FUNC) &_harmony_find_lambda_cpp, 2},
    {"_harmony_make_R_hard", (DL_FUNC) &_harmony_make_R_hard, 1},
    {"_harmony_sampleIdxAndWeight", (DL_FUNC) &_harmony_sampleIdxAndWeight, 3},
    {"_rcpp_module_boot_harmony_module", (DL_FUNC) &_rcpp_module_boot_harmony_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_harmony(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
